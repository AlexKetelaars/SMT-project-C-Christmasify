# probability threshold
g2 <- g2 + geom_area(aes(x=x, y=probability_threshold, fill="Threshold probability"), alpha=.4)
# adjective probability
g2 <- g2 + geom_area(aes(x=x, y=use_adjective, fill="Adjective probability"), alpha=.4)
g2 <- g2 + theme(legend.text=element_text(size=10))
g2
max_threshold = as.numeric(example.height$x[which.max(example.height$probability_threshold)])
max_adjective = as.numeric(example.height$x[which.max(example.height$use_adjective)])
# plot
g2 <- ggplot(example.height, aes(x=x, y=y))
g2 <- g2 + geom_area(aes(fill="Heights distribution"), alpha=.4)  + xlab("height") + ylab("P") + theme_gray(20)
# probability threshold
g2 <- g2 + geom_area(aes(x=x, y=probability_threshold, fill="Threshold probability"), alpha=.4)
# adjective probability
#g2 <- g2 + geom_area(aes(x=x, y=use_adjective, fill="Adjective probability"), alpha=.4)
g2 <- g2 + theme(legend.text=element_text(size=10))
g2
g2
# plot
g2 <- ggplot(example.height, aes(x=x, y=y))
g2 <- g2 + geom_area(aes(fill="Heights distribution"), alpha=.4)  + xlab("height") + ylab("P") + theme_gray(20)
# probability threshold
g2 <- g2 + geom_area(aes(x=x, y=probability_threshold, fill="Threshold probability"), alpha=.4)
# adjective probability
g2 <- g2 + geom_area(aes(x=x, y=use_adjective, fill="Adjective probability"), alpha=.4)
g2 <- g2 + theme(legend.text=element_text(size=10))
g2
View(example.height)
library("ggplo2")
library("ggplot2")
# plot
g2 <- ggplot(example.height, aes(x=x, y=y))
g2 <- g2 + geom_area(aes(fill="Heights distribution"), alpha=.4)  + xlab("height") + ylab("P") + theme_gray(20)
# probability threshold
g2 <- g2 + geom_area(aes(x=x, y=probability_threshold, fill="Threshold probability"), alpha=.4)
# adjective probability
g2 <- g2 + geom_area(aes(x=x, y=use_adjective, fill="Adjective probability"), alpha=.4)
g2 <- g2 + theme(legend.text=element_text(size=10))
g2
use.adjective <- function(degree, scale.points, lambda, coverage.parameter, densityf, cumulativef) {
return(
sum(
sapply(scale.points[scale.points <=degree],
function(x){
probability.threshold(x, scale.points, lambda, coverage.parameter, densityf, cumulativef)
}
)
)/ # denominator of probability threshold
#  sum(
#    sapply(scale.points,
#          function(x){
#              exp(lambda*utility(x, scale.points, coverage.parameter, densityf, cumulativef))
#          }
#   )
#    )
)
}
use.adjective <- function(degree, scale.points, lambda, coverage.parameter, densityf, cumulativef) {
return(
sum(
sapply(scale.points[scale.points <=degree],
function(x){
probability.threshold(x, scale.points, lambda, coverage.parameter, densityf, cumulativef)
}
)
) # / denominator of probability threshold
#  sum(
#    sapply(scale.points,
#          function(x){
#              exp(lambda*utility(x, scale.points, coverage.parameter, densityf, cumulativef))
#          }
#   )
#    )
)
}
example.height$use_adjective <- sapply(example.height$x, function(x) {use.adjective(degree = x, scale.points = scale.points, lambda = 50, coverage.parameter = 0, densityf=function(x) {dnorm(x, 180, 10)}, cumulativef=function(x) {pnorm(x, 180, 10)})})
View(example.height)
library(BayesianTools)
install.packages("BayesianTools")
# Task 3:
# check cor between predicted and observed data
scale.points.exp <- c(1:14)
denf_gaus_exp <- function(x) {dnorm(x, 6, 2)}
cumf_gauss_exp <-function(x) {pnorm(x, 6, 2)}
denf_left_exp <- function(x){dgamma(x, 4, 1.5)}
cumf_left_exp <- function(x){pgamma(x, 3, 1.5)}
denf_moved_exp <- function(x){dnorm(x, 9, 2)}
cumf_moved_exp <- function(x){pnorm(x, 9, 2)}
cor(data.gaus$percentage[data.gaus$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0.1, denf_gaus_exp, cumf_gauss_exp)}), method="pearson")
cor(data.gaus$percentage[data.gaus$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_gaus_exp, cumf_gauss_exp)}), method="pearson")
cor(data.gaus$percentage[data.gaus$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0, denf_gaus_exp, cumf_gauss_exp)}), method="pearson")
cor(data.left$percentage[data.left$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0.1, denf_left_exp, cumf_left_exp)}), method="pearson")
cor(data.left$percentage[data.left$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_left_exp, cumf_left_exp)}), method="pearson")
cor(data.left$percentage[data.left$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0, denf_left_exp, cumf_left_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0.1, denf_moved_exp, cumf_moved_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_moved_exp, cumf_moved_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0, denf_moved_exp, cumf_moved_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_left_exp, cumf_left_exp)}), method="pearson")
data.adjective <- read.csv(file="adjective-data.csv", header=TRUE)
gaussian.dist <-   c(1,2,3,4,5,6,5,4,3,2,1,0,0,0)
left.skew.dist <-  c(2,5,6,6,5,4,3,2,1,1,1,0,0,0)
moved.dist <-      c(0,0,0,1,2,3,4,5,6,5,4,3,2,1)
right.skew.dist <- c(1,1,1,2,3,4,5,6,6,5,2,0,0,0)
sapply(1:14, function(x) {round(length(rgamma(360, shape=1, scale=100)[which(round(rgamma(360, shape=4, scale=1.5)) == x)])/10)})
data.gaus <- data.adjective[data.adjective$Distribution=="gaussian",]
data.left <- data.adjective[data.adjective$Distribution=="left",]
data.moved <- data.adjective[data.adjective$Distribution=="moved",]
library(ggplot2)
library(gridExtra)
p.g <- ggplot(data.gaus,aes(x=Stimulus,y=100*percentage,colour=Adjective))+geom_line()+ ylab("P") +ggtitle("gaussian")
p.l <- ggplot(data.left,aes(x=Stimulus,y=100*percentage,colour=Adjective))+geom_line()+ggtitle("left skewed")
p.m <- ggplot(data.moved,aes(x=Stimulus,y=100*percentage,colour=Adjective))+geom_line()+ggtitle("moved")
grid.arrange(p.g,p.l,p.m,ncol=2)
# Task 3:
# check cor between predicted and observed data
scale.points.exp <- c(1:14)
denf_gaus_exp <- function(x) {dnorm(x, 6, 2)}
cumf_gauss_exp <-function(x) {pnorm(x, 6, 2)}
denf_left_exp <- function(x){dgamma(x, 4, 1.5)}
cumf_left_exp <- function(x){pgamma(x, 3, 1.5)}
denf_moved_exp <- function(x){dnorm(x, 9, 2)}
cumf_moved_exp <- function(x){pnorm(x, 9, 2)}
cor(data.gaus$percentage[data.gaus$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0.1, denf_gaus_exp, cumf_gauss_exp)}), method="pearson")
cor(data.gaus$percentage[data.gaus$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_gaus_exp, cumf_gauss_exp)}), method="pearson")
cor(data.gaus$percentage[data.gaus$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0, denf_gaus_exp, cumf_gauss_exp)}), method="pearson")
cor(data.left$percentage[data.left$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0.1, denf_left_exp, cumf_left_exp)}), method="pearson")
cor(data.left$percentage[data.left$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_left_exp, cumf_left_exp)}), method="pearson")
cor(data.left$percentage[data.left$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0, denf_left_exp, cumf_left_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0.1, denf_moved_exp, cumf_moved_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_moved_exp, cumf_moved_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, 0, denf_moved_exp, cumf_moved_exp)}), method="pearson")
cor(data.moved$percentage[data.moved$Adjective == "big"], sapply(scale.points.exp, function(x) {use.adjective(x, scale.points.exp, 40, -0.1, denf_left_exp, cumf_left_exp)}), method="pearson")
data.adjective <- read.csv(file="adjective-data.csv", header=TRUE)
gaussian.dist <-   c(1,2,3,4,5,6,5,4,3,2,1,0,0,0)
left.skew.dist <-  c(2,5,6,6,5,4,3,2,1,1,1,0,0,0)
moved.dist <-      c(0,0,0,1,2,3,4,5,6,5,4,3,2,1)
right.skew.dist <- c(1,1,1,2,3,4,5,6,6,5,2,0,0,0)
sapply(1:14, function(x) {round(length(rgamma(360, shape=1, scale=100)[which(round(rgamma(360, shape=4, scale=1.5)) == x)])/10)})
data.adjective <- read.csv(file="adjective-data.csv", header=TRUE)
data.adjective <- read.csv(file="adjective-data.csv", header=TRUE)
df = read.csv(file="features.csv", header=TRUE)
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(initial_tempo), sd = sd(initial_tempo))
ggplot(df, aes(condition, initial_tempo, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(initial_tempo), sd = sd(initial_tempo))
ggplot(df, aes(condition, initial_tempo, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(initial_tempo), sd = sd(initial_tempo))
ggplot(df, aes(condition, initial_tempo, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
setwd("~/PycharmProjects/SMT-project-C-Christmasify")
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(initial_tempo), sd = sd(initial_tempo))
ggplot(df, aes(condition, initial_tempo, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(initial_tempo), sd = sd(initial_tempo))
ggplot(df, aes(condition, initial_tempo, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7,
position = position_dodge(0.9)
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
View(df.mean_sd)
setwd("~/PycharmProjects/SMT-project-C-Christmasify")
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(initial_tempo), sd = sd(initial_tempo))
ggplot(df, aes(condition, initial_tempo, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
View(df.mean_sd)
View(df)
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(note_duration), sd = sd(initial_tempo))
ggplot(df, aes(condition, note_duration, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(note_duration), sd = sd(note_duration))
ggplot(df, aes(condition, note_duration, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(melodic_interval), sd = sd(melodic_interval))
ggplot(df, aes(condition, melodic_interval, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(motion_direction), sd = sd(motion_direction))
ggplot(df, aes(condition, motion_direction, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(strongest_pitch), sd = sd(strongest_pitch))
ggplot(df, aes(condition, strongest_pitch, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(importance_bass), sd = sd(importance_bass))
ggplot(df, aes(condition, importance_bass, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(importance_middle), sd = sd(importance_middle))
ggplot(df, aes(condition, importance_middle, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
df = read.csv(file="features.csv", header=TRUE)
library("dplyr")
library(ggplot2)
# Plot with all RTs and the mean for each face type
#png(file="plot.png",width=2000,height=2000, res=300)
df.mean_sd <- df %>%
group_by(condition) %>%
summarise(mean = mean(importance_height), sd = sd(importance_height))
ggplot(df, aes(condition, importance_height, color=condition)) +
geom_jitter(width = 0.25, show.legend = FALSE)+
geom_point(data = df.mean_sd, aes(condition, mean), colour = 'black', size = 4)+
xlab("Input dataset")+
#ylab("?")+
theme_bw()+
theme(text = element_text(size=18), axis.text.x = element_text(color = "black"), axis.text.y = element_text(color = "black"))+
geom_errorbar(
data = df.mean_sd,
aes(condition, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'black',
width = 0.3,
size=0.7
)
#labs(title = "All RTs and the mean for each face type")+
#geom_hline(yintercept=angryMean, linetype="dashed", color = "black")+
#geom_hline(yintercept=neutralMean, linetype="dashed", color = "black")
#dev.off()
